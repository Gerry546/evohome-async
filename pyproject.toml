[project]
  name = "evohome-async"
  version = "0.4.0"
  description = "An async client for connecting to Honeywell's TCC RESTful API."
  authors = [
    {name = "David Bonnes", email = "zxdavb@bonnes.me"},
    {name = "Andrew Stock", email = "evohome@andrew-stock.com"},
  ]
  dependencies = [
    "aiohttp==3.9.0b0; python_version >= '3.12'",
    "aiohttp==3.8.5; python_version < '3.12'",
  ]
  requires-python = ">=3.11"
  readme = "README.md"
  license = {text = "MIT"}

[tool.isort]
  profile = "black"
  multi_line_output = 3

[tool.pylint.format]
  max-line-length = 120

[tool.pylint.MASTER]
  ignore="tests"

[tool.pylint.BASIC]
  good-names="i,j,k,ex,Run,_,fp"

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# global-statement - used for the on-demand requirement installation
# redefined-variable-type - this is Python, we're duck typing!
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# not-an-iterable - https://github.com/PyCQA/pylint/issues/2311
# unnecessary-pass - readability for functions which only contain pass
  disable="""
    format,
    abstract-class-little-used,
    abstract-method,
    cyclic-import,
    duplicate-code,
    global-statement,
    inconsistent-return-statements,
    locally-disabled,
    not-an-iterable,
    not-context-manager,
    redefined-variable-type,
    too-few-public-methods,
    too-many-arguments,
    too-many-branches,
    too-many-instance-attributes,
    too-many-lines,
    too-many-locals,
    too-many-public-methods,
    too-many-return-statements,
    too-many-statements,
    unnecessary-pass,
    unused-argument
  """

[tool.pylint.REPORTS]
  reports = "no"

[tool.pylint.TYPECHECK]
  # For attrs
  ignored-classes = "_CountingAttr"

[tool.pylint.FORMAT]
  expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
  overgeneral-exceptions = "Exception"

#
## ruff

[tool.ruff]
  # Assume Python 3.11
  target-version = "py311"

  # # Exclude a variety of commonly ignored directories.
  # exclude = [
  #   ".bzr",
  #   ".direnv",
  #   ".eggs",
  #   ".git",
  #   ".git-rewrite",
  #   ".hg",
  #   ".mypy_cache",
  #   ".nox",
  #   ".pants.d",
  #   ".pytype",
  #   ".ruff_cache",
  #   ".svn",
  #   ".tox",
  #   ".venv",
  #   "__pypackages__",
  #   "_build",
  #   "buck-out",
  #   "build",
  #   "dist",
  #   "node_modules",
  #   "venv",
  # ]

[tool.ruff.lint]
  # ZXDAVB: TODO: Allow unused variables when underscore-prefixed.
  dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

#   # Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
#   # Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
#   # McCabe complexity (`C901`) by default.
#   select = ["E4", "E7", "E9", "F"]
#   ignore = []

#   # Allow fix for all enabled rules (when `--fix`) is provided.
#   fixable = ["ALL"]
#   unfixable = []

